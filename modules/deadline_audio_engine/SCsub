Import('env')

SConscript("sfizz/SCsub")

if env["target"] == "editor":
    SConscript("editor/SCsub")

#SConscript("juce/SCsub")

module_env = env.Clone()

module_env.Append(CPPPATH=["sfizz/build/src"])
module_env.Append(CPPPATH=["sfizz/build/external/st_audiofile/src"])
module_env.add_source_files(env.modules_sources, "audio_formats/*.cpp") #this will add all the cpp files

# module_env.Append(CPPDEFINES=['JUCE_DEBUG=0','JucePlugin_Build_VST=0','JucePlugin_Build_VST3=0','JucePlugin_Build_AU=0','JucePlugin_Build_AUv3=0','JucePlugin_Build_AAX=0','JucePlugin_Build_Standalone=0','JucePlugin_Build_Unity=0','JucePlugin_Build_LV2=0','_LIB','JUCER_VS2022_78A503E=1','JUCE_APP_VERSION=1.0.0','JUCE_APP_VERSION_HEX=0x10000'])
# module_env.AppendUnique(CPPPATH=["JUCE/modules", "JuceLibraryCode"])
module_env.add_source_files(env.modules_sources, "juce/*.cpp") #this will add all the cpp files


if env.dev_build:
    module_env.Append(CPPDEFINES=["JUCE_DEBUG=1", "JUCE_LOG_ASSERTIONS=1"])
    env.Append(LIBPATH=['#modules/deadline_audio_engine/sfizz/build/library/lib/RelWithDebInfo'])
else:
    env.Append(LIBPATH=['#modules/deadline_audio_engine/sfizz/build/library/lib/Release'])
module_env.add_source_files(env.modules_sources, "*.cpp") #this will add all the cpp files

if env["platform"] == "windows":
    module_env.Append(CPPDEFINES=["JUCE_MSVC=1"])
    env.Append(LINKFLAGS=['absl_bad_optional_access.lib', 'absl_bad_variant_access.lib', 'absl_base.lib', 'absl_city.lib', 'absl_civil_time.lib', 'absl_cord.lib', 'absl_cord_internal.lib'])
    env.Append(LINKFLAGS=['absl_cordz_functions.lib', 'absl_cordz_handle.lib', 'absl_cordz_info.lib', 'absl_crc_cord_state.lib', 'absl_crc_cpu_detect.lib', 'absl_crc_internal.lib'])
    env.Append(LINKFLAGS=['absl_crc32c.lib', 'absl_debugging_internal.lib', 'absl_demangle_internal.lib', 'absl_exponential_biased.lib', 'absl_graphcycles_internal.lib', 'absl_hash.lib'])
    env.Append(LINKFLAGS=['absl_hashtablez_sampler.lib', 'absl_int128.lib', 'absl_log_severity.lib', 'absl_low_level_hash.lib', 'absl_malloc_internal.lib', 'absl_raw_hash_set.lib'])
    env.Append(LINKFLAGS=['absl_raw_logging_internal.lib', 'absl_spinlock_wait.lib', 'absl_stacktrace.lib', 'absl_strings.lib', 'absl_strings_internal.lib', 'absl_symbolize.lib', 'absl_synchronization.lib'])
    env.Append(LINKFLAGS=['absl_throw_delegate.lib', 'absl_time.lib', 'absl_time_zone.lib', 'aiff.lib', 'libwavpack.lib', 'sfizz_cephes.lib', 'sfizz_cpuid.lib'])
    #env.Append(LINKFLAGS=['sfizz_filesystem_impl.lib', 'sfizz_fmidi.lib', 'sfizz_hiir_polyphase_iir2designer.lib', 'sfizz_import.lib', 'sfizz_internal.lib', 'sfizz_kissfft.lib', 'sfizz_messaging.lib'])
    env.Append(LINKFLAGS=['sfizz_filesystem_impl.lib', 'sfizz_fmidi.lib', 'sfizz_hiir_polyphase_iir2designer.lib', 'sfizz_import.lib', 'sfizz_kissfft.lib', 'sfizz_messaging.lib'])
    #env.Append(LINKFLAGS=['sfizz_parser.lib', 'sfizz_pugixml.lib', 'sfizz_spin_mutex.lib', 'sfizz_spline.lib', 'sfizz_static.lib', 'sfizz_tunings.lib', 'st_audiofile.lib', 'st_audiofile_formats.lib'])
    env.Append(LINKFLAGS=['sfizz_parser.lib', 'sfizz_pugixml.lib', 'sfizz_spin_mutex.lib', 'sfizz_spline.lib', 'sfizz_tunings.lib', 'st_audiofile.lib', 'st_audiofile_formats.lib'])
else:
    env.Append(LINKFLAGS=['absl_bad_optional_access.a', 'absl_bad_variant_access.a', 'absl_base.a', 'absl_city.a', 'absl_civil_time.a', 'absl_cord.a', 'absl_cord_internal.a'])
    env.Append(LINKFLAGS=['absl_cordz_functions.a', 'absl_cordz_handle.a', 'absl_cordz_info.a', 'absl_crc_cord_state.a', 'absl_crc_cpu_detect.a', 'absl_crc_internal.a'])
    env.Append(LINKFLAGS=['absl_crc32c.a', 'absl_debugging_internal.a', 'absl_demangle_internal.a', 'absl_exponential_biased.a', 'absl_graphcycles_internal.a', 'absl_hash.a'])
    env.Append(LINKFLAGS=['absl_hashtablez_sampler.a', 'absl_int128.a', 'absl_log_severity.a', 'absl_low_level_hash.a', 'absl_malloc_internal.a', 'absl_raw_hash_set.a'])
    env.Append(LINKFLAGS=['absl_raw_logging_internal.a', 'absl_spinlock_wait.a', 'absl_stacktrace.a', 'absl_strings.a', 'absl_strings_internal.a', 'absl_symbolize.a', 'absl_synchronization.a'])
    env.Append(LINKFLAGS=['absl_throw_delegate.a', 'absl_time.a', 'absl_time_zone.a', 'aiff.a', 'libwavpack.a', 'sfizz_cephes.a', 'sfizz_cpuid.a'])
    #env.Append(LINKFLAGS=['sfizz_filesystem_impl.a', 'sfizz_fmidi.a', 'sfizz_hiir_polyphase_iir2designer.a', 'sfizz_import.a', 'sfizz_internal.a', 'sfizz_kissfft.a', 'sfizz_messaging.a'])
    env.Append(LINKFLAGS=['sfizz_filesystem_impl.a', 'sfizz_fmidi.a', 'sfizz_hiir_polyphase_iir2designer.a', 'sfizz_import.a', 'sfizz_kissfft.a', 'sfizz_messaging.a'])
    #env.Append(LINKFLAGS=['sfizz_parser.a', 'sfizz_pugixml.a', 'sfizz_spin_mutex.a', 'sfizz_spline.a', 'sfizz_static.a', 'sfizz_tunings.a', 'st_audiofile.a', 'st_audiofile_formats.a'])
    env.Append(LINKFLAGS=['sfizz_parser.a', 'sfizz_pugixml.a', 'sfizz_spin_mutex.a', 'sfizz_spline.a', 'sfizz_tunings.a', 'st_audiofile.a', 'st_audiofile_formats.a'])


#if env["target"] == "editor":
#    # Deadline Audio Engine
#    module_env.Append(CPPPATH=["deadline_audio_engine/JuceLibraryCode"])
#    module_env.Append(CPPPATH=["deadline_audio_engine/JUCE\modules"])
#    module_env.Append(CPPPATH=["deadline_audio_engine/tracktion_engine\modules"])
#
#    if env["arch"] == "x86_32":
#        env.Append(LIBPATH=['#modules/deadline_audio_engine/deadline_audio_engine/lib/x86/Static Library'])
#        if env.dev_build:
#            if env["platform"] == "windows":
#                env.Append(LINKFLAGS=['deadline_audio_engine.static.debug.x86.lib'])
#            else:
#                env.Append(LINKFLAGS=['deadline_audio_engine.static.debug.x86.a'])
#        else:
#            if env["platform"] == "windows":
#                env.Append(LINKFLAGS=['deadline_audio_engine.static.release.x86.lib'])
#            else:
#                env.Append(LINKFLAGS=['deadline_audio_engine.static.release.x86.a'])
#    else:
#        env.Append(LIBPATH=['#modules/deadline_audio_engine/deadline_audio_engine/lib/x64/Static Library'])
#        if env.dev_build:
#            if env["platform"] == "windows":
#                env.Append(LINKFLAGS=['deadline_audio_engine.static.debug.x64.lib'])
#            else:
#                env.Append(LINKFLAGS=['deadline_audio_engine.static.debug.x64.a'])
#        else:
#            if env["platform"] == "windows":
#                env.Append(LINKFLAGS=['deadline_audio_engine.static.release.x64.lib'])
#            else:
#                env.Append(LINKFLAGS=['deadline_audio_engine.static.release.x64.a'])
